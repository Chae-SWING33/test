#include <iostream>
#include <vector>
#include <algorithm>


using namespace std;

template<typename T>
void printVector(const vector<T>& vec) {
	typename vector<T>::const_iterator it;
	for (it = vec.begin(); it != vec.end(); ++it) {
		cout << *it << " ";
	}
	cout << endl;
}

int main() {
	vector<int> numbers;
	numbers.push_back(1);
	numbers.push_back(7);
	numbers.push_back(4);
	numbers.push_back(8);
	numbers.push_back(3);
	numbers.push_back(9);

	cout << "기존 벡터 숫자들: ";
	printVector(numbers);

	sort(numbers.begin(), numbers.end());
	cout << "정렬된 벡터 숫자들: ";
	printVector(numbers);

	int target = 7;
	vector<int>::iterator numIt = find(numbers.begin(), numbers.end(), target);
	if (numIt != numbers.end()) {
		cout << target << " 의 index: " << distance(numbers.begin(), numIt) << endl;
	}
	else {
		cout << target << " not found in the vector." << endl;
	}

	vector<string> fruits;
	fruits.push_back("banana");
	fruits.push_back("apple");
	fruits.push_back("orange");
	fruits.push_back("grape");

	cout << "\n기존 벡터 과일들: ";
	printVector(fruits);

	sort(fruits.begin(), fruits.end());
	cout << "정렬된 벡터 과일들: ";
	printVector(fruits);

	string targetFruit = "apple";
	vector<string>::iterator fruitIt = find(fruits.begin(), fruits.end(), targetFruit);
	if (fruitIt != fruits.end()) {
		cout << targetFruit << " 의 index: " << distance(fruits.begin(), fruitIt) << endl;
	}
	else {
		cout << targetFruit << " not found in the vector." << endl;
	}

	return 0;
}
